var gamePeice;
var obstacles = [];
var score;

// blep blep
function startGame() {
    gamePeice = new component(30, 30, "red", 10, 120);
    gamePeice.gravity = 0.05;
    score = new component("30px", "Consolas", "black", 280, 40, "text");
    gameArea.start();
}

var gameArea = {
    canvas : document.createElement("canvas"),
    start : function() {
        this.canvas.width = 480;
        this.canvas.height = 270;
        this.context = this.canvas.getContext("2d");
        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
        this.frameNo = 0;
    },
    clear : function () {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
}

function component(width, height, color, x, y, type) {
    this.type = type;
    this.score = 0;
    this.width = width;
    this.height = height;
    this.speedX = 0;
    this.speedY = 0;
    this.x = x;
    this.y = y;
    this.gravity = 0;
    this.gravitySpeed = 0;
    this.update = function() {
        ctx = gameArea.context;
        if(this.type == "text") {
            ctx.font = this.width + " " + this.height;
            ctx.fillStyle = color;
            ctx.fillText(this.text, this.x, this.y);
        } else {
            ctx.fillStyle = color;
            ctx.fillRect(this.x, this.y, this.width, this.height);
        }
    }
    this.newPos = function() {
        this.gravitySpeed += this.gravity;
        this.x += this.speedX;
        this.y += this.speedY + this.gravitySpeed;
        this.hitBottom();
    }
    this.hitBottom = function() {
        var rockbottom = gameArea.canvas.height = this.height;
        if (this.y > rockbottom) {
            this.y = rockbottom;
            this.gravitySpeed = 0;
        }
    }
    this.crashWith = function(otherobj) {
        // this objects coordinates
        var left = this.x;
        var right = this.x + (this.width);
        var top = this.y;
        var bottom = this.y + (this.height);
        
        //other objects coordinates
        var otherleft = otherobj.x;
        var otherright = otherobj.x + (otherobj.width);
        var othertop = otherobj.y;
        var otherbottom = otherobj.y + (otherobj.height);
        var crash = true;
        if( (bottom < othertop) || (top > otherbottom) || (right < otherleft) || (left > otherright)){
            crash = false;
        }
        return crash;
    }
}

function updateGameArea() {
    var x, height, gap, minHeight, maxHeight, minGap, maxGap;
    for (i = 0; i < obstacles.length; i += 1) {
        if(gamePeice.crashWith(obstacles[i])) {
            return;
        }
    }
    
    gameArea.clear();
    gameArea.frameNo += 1;
    
    if(gameArea.frameNo == 1 || everyinterval(150)) {
        x = gameArea.canvas.width;
        minheight = 20;
        maxHeight = 200;
        height = Math.floor(Math.random() * (maxHeight - minHeight+1)+minHeight);
        minGap = 50;
        maxgap = 200;
        gap = Math.floor(Math.random()*(maxheight - minHeight+1)+minheight);
        obstacles.push(new component(10, height, "green", x, 0));
        obstacles.push(new component910, x - height - gap, "green", x, height + gap);
    }
    for (i = 0; i<obstacles.length; i += 1){
        obstacles[i].x += -1;
        obstacles[i].update();
    }
    score.text="Score: " + gameArea.frameNo;
    score.update();
    gamePeice.newPos();
    gamePeice.update();    
}

function everyinterval(n) {
    if((gameArea.frameNo / n) % 1 == 0) {return true;}
    return false;
}

function accelerate(n){
    gamePeice.gravity = n;
}